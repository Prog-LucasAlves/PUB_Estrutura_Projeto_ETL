{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#workflow","title":"Workflow","text":""},{"location":"#funcao-de-transformacao-de-dados","title":"Fun\u00e7\u00e3o de Transforma\u00e7\u00e3o de dados","text":"<p>Fun\u00e7\u00e3o para ler os arquivos da pasta data/input e retornar uma lista de dataframes.</p> <p>args: input_path (str): caminho da pasta com os arquivos</p> <p>return: lista de dataframes</p> Source code in <code>app\\pipeline\\extract.py</code> <pre><code>def extract_from_excel(path: str) -&gt; List[pd.DataFrame]:\n    \"\"\"\n    Fun\u00e7\u00e3o para ler os arquivos da pasta data/input e retornar uma lista de dataframes.\n\n    args: input_path (str): caminho da pasta com os arquivos\n\n    return: lista de dataframes\n    \"\"\"\n    # Lista de arquivos do diret\u00f3rio input_path com extens\u00e3o .xlsx\n    all_files = glob.glob(os.path.join(path, '*.xlsx'))\n\n    # Lista para armazenar os dataframes lidos do arquivo excel\n    data_frame_list = []\n    # Percorre a lista de arquivos do diret\u00f3rio input_path\n    for file in all_files:\n        # L\u00ea o arquivo excel e retorna um dataframe\n        data = pd.read_excel(file)\n        # Adiciona o dataframe lido \u00e0 lista de dataframes\n        data_frame_list.append(data)\n\n    # Retorna a lista de dataframes lidos do arquivo excel\n    return data_frame_list\n</code></pre>"}]}